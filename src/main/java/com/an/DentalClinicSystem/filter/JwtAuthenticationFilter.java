package com.an.DentalClinicSystem.filter;

import com.an.DentalClinicSystem.service.CustomUserDetails;
import com.an.DentalClinicSystem.service.CustomUserDetailsService;
import com.an.DentalClinicSystem.utils.JwtUtil;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.context.annotation.Lazy;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import java.io.IOException;


@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter {

    private JwtUtil jwtUtil;
    private CustomUserDetailsService customUserDetailsService;


    public  JwtAuthenticationFilter(
            JwtUtil jwtUtil,
            @Lazy CustomUserDetailsService customUserDetailsService)
    {
        this.jwtUtil = jwtUtil;
        this.customUserDetailsService = customUserDetailsService;
    }


    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain)
            throws ServletException, IOException {

        // 1Ô∏è‚É£ L·∫•y gi√° tr·ªã t·ª´ header Authorization (d·∫°ng: "Bearer <token>")
        final String authHeader = request.getHeader("Authorization");

        String username = null;
        String jwt = null;

        // 2Ô∏è‚É£ Ki·ªÉm tra header c√≥ t·ªìn t·∫°i v√† b·∫Øt ƒë·∫ßu b·∫±ng "Bearer "
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            // 3Ô∏è‚É£ C·∫Øt b·ªè ti·ªÅn t·ªë "Bearer " ƒë·ªÉ l·∫•y token
            jwt = authHeader.substring(7);

            // 4Ô∏è‚É£ Tr√≠ch xu·∫•t username t·ª´ token b·∫±ng JwtUtil
            username = jwtUtil.extractUsername(jwt);
        }

        // 5Ô∏è‚É£ N·∫øu c√≥ username v√† ch∆∞a c√≥ x√°c th·ª±c trong SecurityContext
        if (username != null && SecurityContextHolder.getContext().getAuthentication() == null) {

            // 6Ô∏è‚É£ T·∫£i th√¥ng tin ng∆∞·ªùi d√πng t·ª´ DB th√¥ng qua CustomUserDetailsService
            CustomUserDetails userDetails = customUserDetailsService.loadUserByUsername(username);

            // 7Ô∏è‚É£ Ki·ªÉm tra token c√≥ h·ª£p l·ªá kh√¥ng (ch·ªØ k√Ω ƒë√∫ng, ch∆∞a h·∫øt h·∫°n, ƒë√∫ng ng∆∞·ªùi d√πng)
            if (jwtUtil.validateToken(jwt, userDetails)) {

                // 8Ô∏è‚É£ T·∫°o ƒë·ªëi t∆∞·ª£ng x√°c th·ª±c ch·ª©a th√¥ng tin ng∆∞·ªùi d√πng v√† quy·ªÅn
                UsernamePasswordAuthenticationToken authToken =
                        new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());

                // 9Ô∏è‚É£ G·∫Øn th√¥ng tin chi ti·∫øt t·ª´ request v√†o ƒë·ªëi t∆∞·ª£ng x√°c th·ª±c
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

                // üîü G·∫Øn ƒë·ªëi t∆∞·ª£ng x√°c th·ª±c v√†o SecurityContext ƒë·ªÉ Spring Security x·ª≠ l√Ω
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        }

        // üîö Cho ph√©p request ƒëi ti·∫øp trong chu·ªói filter
        filterChain.doFilter(request, response);
    }
}
